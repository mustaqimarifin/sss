generator client {
  provider         = "prisma-client-js"
  precountFeatures = "(array)"
  relationMode     = "foreignKeys"
}

datasource db {
  provider = "postgresql"
  url      = env("SQL")
}

model Account {
  id                String  @id @default(dbgenerated("concat('acc', xid())")) @db.Char(23)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("concat('sss', xid())")) @db.Char(23)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(dbgenerated("concat('usr', xid())")) @db.Char(23)
  //role          Role        @default(USER)
  name          String
  email         String?     @unique
  emailVerified DateTime?
  isAdmin       Boolean     @default(false)
  image         String?
  accounts      Account[]
  comments      Comment[]
  likes         Like[]
  sessions      Session[]
  messages      Guestbook[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guestbook {
  id        BigInt   @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Post {
  id       String    @id @default(dbgenerated("concat('pos', xid())")) @db.Char(23)
  slug     String?   @unique
  count    BigInt    @default(1)
  comments Comment[]
}

model Comment {
  id        String    @id @default(dbgenerated("concat('com', xid())")) @db.Char(23)
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    String?
  parentId  String?
  slug      String?
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("ParentChild")
  post      Post?     @relation(fields: [slug], references: [slug])
  user      User?     @relation(fields: [userId], references: [id])
  likes     Like[]

  @@index([userId, slug])
}

model Like {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}
