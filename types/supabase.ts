/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/comments': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments.id'];
          created_at?: parameters['rowFilter.comments.created_at'];
          topic?: parameters['rowFilter.comments.topic'];
          comment?: parameters['rowFilter.comments.comment'];
          user_id?: parameters['rowFilter.comments.user_id'];
          parent_id?: parameters['rowFilter.comments.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments.mentioned_user_ids'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['comments'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comments */
          comments?: definitions['comments'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments.id'];
          created_at?: parameters['rowFilter.comments.created_at'];
          topic?: parameters['rowFilter.comments.topic'];
          comment?: parameters['rowFilter.comments.comment'];
          user_id?: parameters['rowFilter.comments.user_id'];
          parent_id?: parameters['rowFilter.comments.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments.mentioned_user_ids'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments.id'];
          created_at?: parameters['rowFilter.comments.created_at'];
          topic?: parameters['rowFilter.comments.topic'];
          comment?: parameters['rowFilter.comments.comment'];
          user_id?: parameters['rowFilter.comments.user_id'];
          parent_id?: parameters['rowFilter.comments.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments.mentioned_user_ids'];
        };
        body: {
          /** comments */
          comments?: definitions['comments'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/comment_reactions': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comment_reactions.id'];
          created_at?: parameters['rowFilter.comment_reactions.created_at'];
          comment_id?: parameters['rowFilter.comment_reactions.comment_id'];
          user_id?: parameters['rowFilter.comment_reactions.user_id'];
          reaction_type?: parameters['rowFilter.comment_reactions.reaction_type'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['comment_reactions'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comment_reactions */
          comment_reactions?: definitions['comment_reactions'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comment_reactions.id'];
          created_at?: parameters['rowFilter.comment_reactions.created_at'];
          comment_id?: parameters['rowFilter.comment_reactions.comment_id'];
          user_id?: parameters['rowFilter.comment_reactions.user_id'];
          reaction_type?: parameters['rowFilter.comment_reactions.reaction_type'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comment_reactions.id'];
          created_at?: parameters['rowFilter.comment_reactions.created_at'];
          comment_id?: parameters['rowFilter.comment_reactions.comment_id'];
          user_id?: parameters['rowFilter.comment_reactions.user_id'];
          reaction_type?: parameters['rowFilter.comment_reactions.reaction_type'];
        };
        body: {
          /** comment_reactions */
          comment_reactions?: definitions['comment_reactions'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/pages': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.pages.id'];
          slug?: parameters['rowFilter.pages.slug'];
          url?: parameters['rowFilter.pages.url'];
          views?: parameters['rowFilter.pages.views'];
          updated_at?: parameters['rowFilter.pages.updated_at'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['pages'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pages */
          pages?: definitions['pages'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.pages.id'];
          slug?: parameters['rowFilter.pages.slug'];
          url?: parameters['rowFilter.pages.url'];
          views?: parameters['rowFilter.pages.views'];
          updated_at?: parameters['rowFilter.pages.updated_at'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.pages.id'];
          slug?: parameters['rowFilter.pages.slug'];
          url?: parameters['rowFilter.pages.url'];
          views?: parameters['rowFilter.pages.views'];
          updated_at?: parameters['rowFilter.pages.updated_at'];
        };
        body: {
          /** pages */
          pages?: definitions['pages'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/reactions': {
    get: {
      parameters: {
        query: {
          type?: parameters['rowFilter.reactions.type'];
          created_at?: parameters['rowFilter.reactions.created_at'];
          label?: parameters['rowFilter.reactions.label'];
          url?: parameters['rowFilter.reactions.url'];
          metadata?: parameters['rowFilter.reactions.metadata'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['reactions'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reactions */
          reactions?: definitions['reactions'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          type?: parameters['rowFilter.reactions.type'];
          created_at?: parameters['rowFilter.reactions.created_at'];
          label?: parameters['rowFilter.reactions.label'];
          url?: parameters['rowFilter.reactions.url'];
          metadata?: parameters['rowFilter.reactions.metadata'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          type?: parameters['rowFilter.reactions.type'];
          created_at?: parameters['rowFilter.reactions.created_at'];
          label?: parameters['rowFilter.reactions.label'];
          url?: parameters['rowFilter.reactions.url'];
          metadata?: parameters['rowFilter.reactions.metadata'];
        };
        body: {
          /** reactions */
          reactions?: definitions['reactions'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/comment_reactions_metadata': {
    get: {
      parameters: {
        query: {
          comment_id?: parameters['rowFilter.comment_reactions_metadata.comment_id'];
          reaction_type?: parameters['rowFilter.comment_reactions_metadata.reaction_type'];
          reaction_count?: parameters['rowFilter.comment_reactions_metadata.reaction_count'];
          active_for_user?: parameters['rowFilter.comment_reactions_metadata.active_for_user'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['comment_reactions_metadata'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  '/display_users': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.display_users.id'];
          name?: parameters['rowFilter.display_users.name'];
          handle?: parameters['rowFilter.display_users.handle'];
          avatar?: parameters['rowFilter.display_users.avatar'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['display_users'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** display_users */
          display_users?: definitions['display_users'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.display_users.id'];
          name?: parameters['rowFilter.display_users.name'];
          handle?: parameters['rowFilter.display_users.handle'];
          avatar?: parameters['rowFilter.display_users.avatar'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.display_users.id'];
          name?: parameters['rowFilter.display_users.name'];
          handle?: parameters['rowFilter.display_users.handle'];
          avatar?: parameters['rowFilter.display_users.avatar'];
        };
        body: {
          /** display_users */
          display_users?: definitions['display_users'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/comments_with_metadata': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments_with_metadata.id'];
          created_at?: parameters['rowFilter.comments_with_metadata.created_at'];
          topic?: parameters['rowFilter.comments_with_metadata.topic'];
          comment?: parameters['rowFilter.comments_with_metadata.comment'];
          user_id?: parameters['rowFilter.comments_with_metadata.user_id'];
          parent_id?: parameters['rowFilter.comments_with_metadata.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments_with_metadata.mentioned_user_ids'];
          replies_count?: parameters['rowFilter.comments_with_metadata.replies_count'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['comments_with_metadata'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comments_with_metadata */
          comments_with_metadata?: definitions['comments_with_metadata'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments_with_metadata.id'];
          created_at?: parameters['rowFilter.comments_with_metadata.created_at'];
          topic?: parameters['rowFilter.comments_with_metadata.topic'];
          comment?: parameters['rowFilter.comments_with_metadata.comment'];
          user_id?: parameters['rowFilter.comments_with_metadata.user_id'];
          parent_id?: parameters['rowFilter.comments_with_metadata.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments_with_metadata.mentioned_user_ids'];
          replies_count?: parameters['rowFilter.comments_with_metadata.replies_count'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.comments_with_metadata.id'];
          created_at?: parameters['rowFilter.comments_with_metadata.created_at'];
          topic?: parameters['rowFilter.comments_with_metadata.topic'];
          comment?: parameters['rowFilter.comments_with_metadata.comment'];
          user_id?: parameters['rowFilter.comments_with_metadata.user_id'];
          parent_id?: parameters['rowFilter.comments_with_metadata.parent_id'];
          mentioned_user_ids?: parameters['rowFilter.comments_with_metadata.mentioned_user_ids'];
          replies_count?: parameters['rowFilter.comments_with_metadata.replies_count'];
        };
        body: {
          /** comments_with_metadata */
          comments_with_metadata?: definitions['comments_with_metadata'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/rpc/viewcount': {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            page_slug: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/viewcounturl': {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            page_url: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  comments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    topic: string;
    /** Format: character varying */
    comment: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `display_users.id`.<fk table='display_users' column='id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    parent_id?: string;
    /** Format: ARRAY */
    mentioned_user_ids: unknown[];
  };
  comment_reactions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    comment_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `display_users.id`.<fk table='display_users' column='id'/>
     */
    user_id: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `reactions.type`.<fk table='reactions' column='type'/>
     */
    reaction_type: string;
  };
  pages: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    slug: string;
    /** Format: text */
    url?: string;
    /**
     * Format: bigint
     * @default 1
     */
    views: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  reactions: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    type: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    label: string;
    /** Format: character varying */
    url: string;
    /** Format: jsonb */
    metadata?: unknown;
  };
  comment_reactions_metadata: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    comment_id?: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `reactions.type`.<fk table='reactions' column='type'/>
     */
    reaction_type?: string;
    /** Format: bigint */
    reaction_count?: number;
    /** Format: boolean */
    active_for_user?: boolean;
  };
  display_users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    handle?: string;
    /** Format: text */
    avatar?: string;
  };
  comments_with_metadata: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: character varying */
    topic?: string;
    /** Format: character varying */
    comment?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `display_users.id`.<fk table='display_users' column='id'/>
     */
    user_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    parent_id?: string;
    /** Format: ARRAY */
    mentioned_user_ids?: unknown[];
    /** Format: bigint */
    replies_count?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description comments */
  'body.comments': definitions['comments'];
  /** Format: uuid */
  'rowFilter.comments.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.comments.created_at': string;
  /** Format: character varying */
  'rowFilter.comments.topic': string;
  /** Format: character varying */
  'rowFilter.comments.comment': string;
  /** Format: uuid */
  'rowFilter.comments.user_id': string;
  /** Format: uuid */
  'rowFilter.comments.parent_id': string;
  /** Format: ARRAY */
  'rowFilter.comments.mentioned_user_ids': string;
  /** @description comment_reactions */
  'body.comment_reactions': definitions['comment_reactions'];
  /** Format: uuid */
  'rowFilter.comment_reactions.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.comment_reactions.created_at': string;
  /** Format: uuid */
  'rowFilter.comment_reactions.comment_id': string;
  /** Format: uuid */
  'rowFilter.comment_reactions.user_id': string;
  /** Format: character varying */
  'rowFilter.comment_reactions.reaction_type': string;
  /** @description pages */
  'body.pages': definitions['pages'];
  /** Format: bigint */
  'rowFilter.pages.id': string;
  /** Format: text */
  'rowFilter.pages.slug': string;
  /** Format: text */
  'rowFilter.pages.url': string;
  /** Format: bigint */
  'rowFilter.pages.views': string;
  /** Format: timestamp with time zone */
  'rowFilter.pages.updated_at': string;
  /** @description reactions */
  'body.reactions': definitions['reactions'];
  /** Format: character varying */
  'rowFilter.reactions.type': string;
  /** Format: timestamp with time zone */
  'rowFilter.reactions.created_at': string;
  /** Format: character varying */
  'rowFilter.reactions.label': string;
  /** Format: character varying */
  'rowFilter.reactions.url': string;
  /** Format: jsonb */
  'rowFilter.reactions.metadata': string;
  /** @description comment_reactions_metadata */
  'body.comment_reactions_metadata': definitions['comment_reactions_metadata'];
  /** Format: uuid */
  'rowFilter.comment_reactions_metadata.comment_id': string;
  /** Format: character varying */
  'rowFilter.comment_reactions_metadata.reaction_type': string;
  /** Format: bigint */
  'rowFilter.comment_reactions_metadata.reaction_count': string;
  /** Format: boolean */
  'rowFilter.comment_reactions_metadata.active_for_user': string;
  /** @description display_users */
  'body.display_users': definitions['display_users'];
  /** Format: uuid */
  'rowFilter.display_users.id': string;
  /** Format: text */
  'rowFilter.display_users.name': string;
  /** Format: text */
  'rowFilter.display_users.handle': string;
  /** Format: text */
  'rowFilter.display_users.avatar': string;
  /** @description comments_with_metadata */
  'body.comments_with_metadata': definitions['comments_with_metadata'];
  /** Format: uuid */
  'rowFilter.comments_with_metadata.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.comments_with_metadata.created_at': string;
  /** Format: character varying */
  'rowFilter.comments_with_metadata.topic': string;
  /** Format: character varying */
  'rowFilter.comments_with_metadata.comment': string;
  /** Format: uuid */
  'rowFilter.comments_with_metadata.user_id': string;
  /** Format: uuid */
  'rowFilter.comments_with_metadata.parent_id': string;
  /** Format: ARRAY */
  'rowFilter.comments_with_metadata.mentioned_user_ids': string;
  /** Format: bigint */
  'rowFilter.comments_with_metadata.replies_count': string;
}

export interface operations {}

export interface external {}
